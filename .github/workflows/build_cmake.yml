name: CMake Build Matrix

env:
  BUILD_NUMBER: ${{ github.run_number }}
  BRICKSTORE_QT6_MODULES: >-
      build-essential cmake ninja-build
      libglvnd-dev libtbb-dev
      qt6-tools-dev qt6-tools-dev-tools
      qt6-l10n-tools qt6-documentation-tools
      qt6-base-dev qt6-base-private-dev qt6-base-dev-tools
      qt6-qpa-plugins
  BRICKSTORE_GUI_QT6_MODULES: >-
      qt6-declarative-dev qt6-declarative-private-dev
      qt6-quick3d-dev qt6-quick3d-dev-tools libqt6shadertools6-dev
      qt6-gtk-platformtheme
      qml6-module-qt5compat-graphicaleffects

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - next

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.runs-on }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - name: "Windows Intel 64bit"
          artifact: "Windows-x64"
          runs-on: windows-2019
          os: windows
          qt_version: '6.2.4'
          qt_arch: 'win64_msvc2019_64'
          environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          cmake_extra_config: '-DSENTRY=ON'
          vcpkg_triplet: 'x64-windows'

        - name: "Windows ARM 64bit"
          artifact: "Windows-ARM64"
          runs-on: windows-2019
          os: windows
          qt_version: '6.2.4'
          qt_arch: 'win64_msvc2019_arm64'
          environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvarsamd64_arm64.bat"
          cmake_extra_config: '-DCMAKE_TOOLCHAIN_FILE=%Qt6_DIR%/lib/cmake/Qt6/qt.toolchain.cmake -DQT_HOST_PATH=%Qt6_DIR%/../msvc2019_64'
          vcpkg_triplet: 'arm64-windows'

        - name: "Ubuntu 22.04 64bit"
          artifact: "Ubuntu-22.04"
          runs-on: ubuntu-20.04
          os: linux
          debian_container: "buildpack-deps:22.04"

        - name: "Debian 12 Backend 64bit"
          artifact: "Debian-12-Backend"
          runs-on: ubuntu-20.04
          os: linux
          debian_container: "buildpack-deps:bookworm"
          cmake_extra_config: "-DBACKEND_ONLY=ON"
          generate_docs: true
          generate_docker: true

        - name: "Linux AppImage 64bit"
          artifact: "Linux"
          runs-on: ubuntu-20.04
          os: linux
          appimage: true
          qt_version: '6.2.4'
          qt_arch: ''

        - name: "macOS Universal"
          artifact: "macOS"
          runs-on: macos-11
          os: macos
          qt_version: '6.2.4'
          qt_arch: ''
          cmake_extra_config: '-DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"'

        - name: "Android ARM 32bit"
          artifact: "Android-ARM"
          runs-on: ubuntu-20.04
          os: android
          android_abi: 'armeabi-v7a'
          qt_version: '6.3.0'
          qt_arch: 'android_armv7'
          qt_target: 'android'
          cmake_extra_config: ''

        - name: "Android ARM 64bit"
          artifact: "Android-ARM64"
          runs-on: ubuntu-20.04
          os: android
          android_abi: 'arm64-v8a'
          qt_version: '6.3.0'
          qt_arch: 'android_arm64_v8a'
          qt_target: 'android'
          cmake_extra_config: ''

        - name: "iOS"
          artifact: "iOS"
          runs-on: macos-12
          os: ios
          qt_version: '6.3.0'
          qt_arch: ''
          qt_target: 'ios'
          cmake_extra_config: ''

  # BUILD
  #################################################

    steps:

    # Caching
    #################################################

    - name: Cache vcpkg on Windows
      uses: actions/cache@v2
      if: (matrix.config.os == 'windows') && matrix.config.vcpkg_triplet
      with:
        path: |
          C:\vcpkg\installed
          C:\vcpkg\downloads
        key: ${{ matrix.config.vcpkg_triplet }}-vcpkg-cache

    - name: Cache vcpkg on Unix
      uses: actions/cache@v2
      if: (matrix.config.os != 'windows') && matrix.config.vcpkg_triplet
      with:
        path: |
          /usr/local/share/vcpkg/installed
          /usr/local/share/vcpkg/downloads
        key: ${{ matrix.config.vcpkg_triplet }}-vcpkg-cache

    - name: Cache Qt from qt.io
      id: cache-qt
      if: (matrix.config.os != 'linux') || matrix.config.appimage
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ matrix.config.os }}-${{ matrix.config.qt_version }}-${{ matrix.config.qt_arch }}-QtCache-4

    # Get Qt
    #################################################

    - name: Install Qt from qt.io
      if: (matrix.config.os != 'linux') || matrix.config.appimage
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        version: ${{ matrix.config.qt_version }}
        # increase the trailing number in Qt's cache key (QtCache-X) above, if you change the module list below
        modules: 'qtsvg qtquick3d qtshadertools qttools qtquicktimeline qt5compat'
        arch: ${{ matrix.config.qt_arch }}
        target: ${{ matrix.config.qt_target || 'desktop' }}
        tools: ${{ matrix.config.qt_tools }}
        setup-python: false # https://github.com/jurplel/install-qt-action/issues/142

    - name: Install Qt from qt.io (OS version for cross-compiling)
      if: (matrix.config.os == 'android') || (matrix.config.os == 'ios') || (matrix.config.qt_arch == 'win64_msvc2019_arm64')
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        version: ${{ matrix.config.qt_version }}
        # increase the trailing number in Qt's cache key (QtCache-X) above, if you change the module list below
        modules: 'qtquick3d qtshadertools qttools'
        target: 'desktop'
        tools: ${{ matrix.config.qt_tools }}
        setup-python: false # https://github.com/jurplel/install-qt-action/issues/142
        set-env: false

    - name: Fix broken Windows / ARM64 setup
      if: (matrix.config.qt_arch == 'win64_msvc2019_arm64')
      # part 1: QTBUG-101059
      # part 2: jurplel/install-qt-action always exports Qt6_DIR for the first Qt installation
      #         found, but after a cache restore msvc2019_64 sorts BEFORE msvc2919_arm64
      run: |
        sed -i "s,/Users/qt/work/install/,${Qt6_DIR}/../msvc2019_64/," "${Qt6_DIR}/../msvc2019_arm64/bin/qtpaths.bat"
        sed -i "s,/Users/qt/work/install/,${Qt6_DIR}/../msvc2019_64/," "${Qt6_DIR}/../msvc2019_arm64/bin/qmake.bat"
        echo "Qt6_DIR=${Qt6_DIR}/../msvc2019_arm64" >> $GITHUB_ENV
      shell: sh

    - name: Fix broken iOS / ARM64 setup
      if: (matrix.config.os == 'ios')
      # see "part 2" above, only this time for macos vs ios
      run: |
        echo "Qt6_DIR=${Qt6_DIR}/../ios" >> $GITHUB_ENV
      shell: sh

    - name: Install Qt from Linux Distro (native)
      if: (matrix.config.os == 'linux') && !matrix.config.debian_container && !matrix.config.appimage
      run: |
        sudo DEBIAN_FRONTEND=noninteractive apt -y update
        sudo DEBIAN_FRONTEND=noninteractive apt -y install \
            $BRICKSTORE_QT6_MODULES \
            $BRICKSTORE_GUI_QT6_MODULES \
            debhelper lsb-release fakeroot build-essential
      shell: bash

    - name: Install Qt from Linux Distro (container)
      if: (matrix.config.os == 'linux') && matrix.config.debian_container
      run: |
        sudo docker run -v `pwd`:/build --rm --name "debian-build" -d "${{ matrix.config.debian_container }}" sleep 1d
        sudo docker exec -e DEBIAN_FRONTEND=noninteractive "debian-build" apt -y update
        sudo docker exec -e DEBIAN_FRONTEND=noninteractive "debian-build" apt -y install \
            $BRICKSTORE_QT6_MODULES \
            $BRICKSTORE_GUI_QT6_MODULES \
            debhelper lsb-release fakeroot build-essential
      shell: bash

    # Install dependencies using vcpkg
    #################################################

    - name: Install sentry.io (vcpkg)
      if: contains(matrix.config.cmake_extra_config, '-DSENTRY=ON')
      run: |
        $VCPKG_INSTALLATION_ROOT/vcpkg install --recurse sentry-native --triplet ${{ matrix.config.vcpkg_triplet }}
      shell: sh

    # Checkout
    #################################################

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Build for Windows
    #################################################

    - name: Build for Windows
      if: (matrix.config.os == 'windows')
      run: |
        call "${{ matrix.config.environment_script }}"
        call qt-cmake.bat -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo ${{ matrix.config.cmake_extra_config }} "-DVCPKG_PATH=%VCPKG_INSTALLATION_ROOT%/installed/${{ matrix.config.vcpkg_triplet }}" .
        cmake --build . --config RelWithDebInfo --parallel --target installer
      shell: cmd

    - name: Upload Windows Installer
      if: (matrix.config.os == 'windows')
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.exe"

    - name: Upload Windows debug info to sentry.io
      if: (matrix.config.os == 'windows')
      run: |
        curl.exe -L --output ..\\sentry-cli.exe "https://github.com/getsentry/sentry-cli/releases/latest/download/sentry-cli-Windows-i686.exe"
        ..\\sentry-cli.exe --auth-token ${{ secrets.SENTRY_AUTH_TOKEN }} upload-dif --org brickstore --project brickstore .
      shell: cmd

    # Build for Linux
    #################################################

    - name: Build for Linux (native)
      if: (matrix.config.os == 'linux') && !matrix.config.debian_container && !matrix.config.appimage
      run: |
        /usr/lib/qt6/bin/qt-cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo ${{ matrix.config.cmake_extra_config }} .
        cmake --build . --config RelWithDebInfo --parallel --target deb-package
      shell: bash

    - name: Build for Linux (container)
      if: (matrix.config.os == 'linux') && matrix.config.debian_container
      run: |
        sudo docker exec -w /build "debian-build" /usr/lib/qt6/bin/qt-cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo ${{ matrix.config.cmake_extra_config }} .
        sudo docker exec -w /build "debian-build" cmake --build . --config RelWithDebInfo \
            --parallel --target deb-package
      shell: bash

    - name: Build for Linux (appimage)
      if: (matrix.config.os == 'linux') && matrix.config.appimage
      run: |
        sudo DEBIAN_FRONTEND=noninteractive apt -y install \
            g++-10 cmake ninja-build libglvnd-dev libtbb-dev libxkbcommon-dev
        qt-cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_C_COMPILER=/usr/bin/gcc-10 -DCMAKE_CXX_COMPILER=/usr/bin/g++-10 \
            ${{ matrix.config.cmake_extra_config }} .
        cmake --build . --config RelWithDebInfo --parallel --target appimage
      shell: bash

    - name: Upload Linux DEB
      if: (matrix.config.os == 'linux') && !matrix.config.appimage
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.deb"

    - name: Upload Linux AppImage
      if: (matrix.config.os == 'linux') && matrix.config.appimage
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.AppImage"

    # Build for Android
    #################################################

    - name: Checkout Android openssl
      if: (matrix.config.os == 'android')
      run: |
        cd $ANDROID_SDK_ROOT
        echo "Checking out KDAB's OpenSSL into $ANDROID_SDK_ROOT"
        sudo git clone https://github.com/KDAB/android_openssl.git

    - name: Build for Android
      if: (matrix.config.os == 'android')
      run: |
        echo "Using NDK: $ANDROID_NDK_HOME"
        echo "QT_HOST_PATH: $(readlink -f $Qt6_DIR/../gcc_64)"
        sudo DEBIAN_FRONTEND=noninteractive apt -y install cmake ninja-build
        qt-cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DQT_HOST_PATH=$(readlink -f $Qt6_DIR/../gcc_64) \
            -DQT_ANDROID_SDK_BUILD_TOOLS_REVISION=30.0.3 \
            -DANDROID_NATIVE_API_LEVEL=23 \
            -DANDROID_ABI=${{ matrix.config.android_abi }} \
            -DANDROID_NDK_ROOT=${ANDROID_NDK_HOME} \
            -DANDROID_SDK_ROOT=${ANDROID_SDK_ROOT} \
            ${{ matrix.config.cmake_extra_config }} .
        cmake --build . --config RelWithDebInfo --parallel --target final-apk
      shell: bash

    - name: Upload Android APK
      if: (matrix.config.os == 'android')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.apk"

    # Build for macOS
    #################################################

    - name: Build for macOS
      if: (matrix.config.os == 'macos')
      run: |
        qt-cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ${{ matrix.config.cmake_extra_config }} "-DVCPKG_PATH=$VCPKG_INSTALLATION_ROOT/installed/${{ matrix.config.vcpkg_triplet }}" .
        cmake --build . --config RelWithDebInfo --parallel --target dmg
      shell: bash

    - name: Upload macOS DMG
      if: (matrix.config.os == 'macos')
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.dmg"

    - name: Upload macOS debug info to sentry.io
      if: (matrix.config.os == 'macos')
      run: |
        brew install getsentry/tools/sentry-cli
        brew link getsentry/tools/sentry-cli
        # specifying just "." to make sentry-cli look for dSYM files on itself does not work on
        # the CI ... the sentry-cli process will just freeze forever
        /usr/local/bin/sentry-cli --auth-token ${{ secrets.SENTRY_AUTH_TOKEN }} upload-dif \
            --org brickstore --project brickstore \
            bin/BrickStore.app.dSYM/Contents/Resources/DWARF/BrickStore

    # Build for iOS
    #################################################

#    - name: Fix qmake script for iOS
#      if: (matrix.config.os == 'ios')
#      run: |
#        # fix a bug in aqtinstall - the qmake script for iOS isn't patched correctly
#        cd ../Qt/${{ matrix.config.qt_version }}
#        ln -s macos clang_64
#      shell: bash

    - name: Import signing certificate
      if: (matrix.config.os == 'ios')
      env:
        SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.IOS_SIGNING_CERTIFICATE_P12_DATA }}
        SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.IOS_SIGNING_CERTIFICATE_PASSWORD }}
      run: |
        exec .github/scripts/ios-import-certificate.sh

    - name: Import provisioning profile
      if: (matrix.config.os == 'ios')
      env:
        PROVISIONING_PROFILE_DATA: ${{ secrets.IOS_PROVISIONING_PROFILE_DATA }}
        PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.IOS_PROV_PROFILE }}
      run: |
        exec .github/scripts/ios-import-profile.sh

    - name: Import AppStore API key
      if: (matrix.config.os == 'ios')
      env:
        API_KEY: ${{ secrets.IOS_API_KEY }}
        API_KEY_DATA: ${{ secrets.IOS_API_KEY_DATA }}
      run: |
        exec .github/scripts/ios-import-apikey.sh

    - name: Build for iOS
      if: (matrix.config.os == 'ios')
      run: |
        qt-cmake -G Xcode -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DQT_HOST_PATH=$(readlink -f $Qt6_DIR/../macos) \
            -DCMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM=${{ secrets.IOS_DEV_TEAM }} \
            -DCMAKE_XCODE_ATTRIBUTE_PROVISIONING_PROFILE_SPECIFIER=${{ secrets.IOS_PROV_PROFILE }} \
            -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY=${{ secrets.IOS_CODE_SIGN_IDENTITY }} \
            ${{ matrix.config.cmake_extra_config }} .
        cmake --build . --config RelWithDebInfo --parallel --target ipa
      shell: bash

    - name: Upload iOS IPA
      if: (matrix.config.os == 'ios')
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.ipa"

    - name: Upload iOS IPA to the AppStore
      if: (matrix.config.os == 'ios')
      run: |
        xcrun altool --upload-app -f ./BrickStore-*.ipa -t ios \
            --apiIssuer "${{ secrets.IOS_API_ISSUER }}" \
            --apiKey "${{ secrets.IOS_API_KEY }}"
      shell: bash

    # Generate documentation
    #################################################

    - name: Generate Documentation
      if: (matrix.config.os == 'linux') && matrix.config.debian_container && matrix.config.generate_docs && (github.ref == 'refs/heads/main')
      run: |
        sudo docker exec -w /build "debian-build" cmake --build . --target extensions-doc

    - name: Publish Documentation
      if: matrix.config.generate_docs && (github.ref == 'refs/heads/main')
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./doc/html

    # Generate the Backend Docker image
    #################################################

    - name: Create and push Docker image
      if: (matrix.config.os == 'linux') && matrix.config.generate_docker
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        cp *.deb docker/brickstore-backend.deb
        cd docker
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
        docker build . --tag "rgriebl/brickstore-backend:$BUILD_NUMBER"
        docker push "$DOCKER_USER/brickstore-backend:$BUILD_NUMBER"

  # RELEASE
  #################################################

  release:
    needs: [ build ]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Download Artifacts to Release
      uses: actions/download-artifact@v2
      with:
        path: 'artifacts'

    - name: Rename Artifacts
      run: |
        find artifacts -mindepth 2 -type f -print0 | while read -d $'\0' a; do
          d="$(dirname $a)"
          mv "$a" "${d}-$(basename $a)"
          rm -rf "$d"
        done
        echo "Artifacts after flattening:"
        find artifacts
      shell: bash

    - name: Release
      uses: docker://antonyurchenko/git-release:latest
      # uses: rgriebl/git-release@testing
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: artifacts/*

    - name: Create release on sentry.io
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: brickstore
        SENTRY_PROJECT: brickstore
      with:
        version: "brickstore@${{ env.BUILD_NUMBER }}"
