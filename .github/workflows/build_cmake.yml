# Copyright (C) 2004-2023 Robert Griebl
# SPDX-License-Identifier: GPL-3.0-only

name: CMake Build Matrix

env:
  BUILD_NUMBER: ${{ github.run_number }}
  BRICKSTORE_QT6_DEB_PACKAGES: >-
      build-essential cmake ninja-build
      libglvnd-dev libtbb-dev
      qt6-tools-dev qt6-tools-dev-tools
      qt6-l10n-tools qt6-documentation-tools
      qt6-base-dev qt6-base-private-dev qt6-base-dev-tools
      qt6-qpa-plugins
  BRICKSTORE_GUI_QT6_DEB_PACKAGES: >-
      qt6-declarative-dev qt6-declarative-private-dev
      qt6-quick3d-dev qt6-quick3d-dev-tools libqt6shadertools6-dev
      qt6-gtk-platformtheme libqt6svg6
      qt6-image-formats-plugins
      qml6-module-qt5compat-graphicaleffects
      qml6-module-qtqml-workerscript qml6-module-quick3d
  BRICKSTORE_GUI_QT6_INSTALLER_MODULES: >-
      qtquick3d qtshadertools qtquicktimeline qt5compat qtimageformats

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - next
    tags:
      - v*

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.runs-on }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - name: "Windows Intel 64bit"
          artifact: "Windows-x64"
          runs-on: windows-2019
          os: windows
          qt_host: 'windows'
          qt_version: '6.4.2'
          qt_arch: 'win64_msvc2019_64'
          qt_dir: "msvc2019_64"
          environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          cmake_extra_config: '-DSENTRY=ON'

        - name: "Windows ARM 64bit"
          artifact: "Windows-ARM64"
          runs-on: windows-2019
          os: windows
          qt_host: 'windows'
          qt_host_arch: 'win64_msvc2019_64'
          qt_version: '6.4.2'
          qt_arch: 'win64_msvc2019_arm64'
          qt_dir: "msvc2019_arm64"
          environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvarsamd64_arm64.bat"
          cmake_extra_config: '-DCMAKE_TOOLCHAIN_FILE=%Qt6_DIR%/lib/cmake/Qt6/qt.toolchain.cmake -DQT_HOST_PATH=%Qt6_DIR%/../msvc2019_64'

        - name: "Ubuntu 22.04 64bit"
          artifact: "Ubuntu-22.04"
          runs-on: ubuntu-20.04
          os: linux
          debian_container: "buildpack-deps:22.04"

        - name: "Debian 12 Backend 64bit"
          artifact: "Debian-12-Backend"
          runs-on: ubuntu-20.04
          os: linux
          debian_container: "buildpack-deps:bookworm"
          cmake_extra_config: "-DBACKEND_ONLY=ON"
          generate_docs: true
          generate_docker: true

        - name: "Linux AppImage 64bit"
          artifact: "Linux"
          runs-on: ubuntu-20.04
          os: linux
          appimage: true
          qt_host: 'linux'
          qt_version: '6.4.2'
          qt_arch: 'gcc_64'

        - name: "macOS Universal"
          artifact: "macOS"
          runs-on: macos-11
          os: macos
          qt_host: 'mac'
          qt_version: '6.4.2'
          qt_arch: 'clang_64'
          qt_dir: 'macos'
          cmake_extra_config: '-DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DSENTRY=ON'

        - name: "Android"
          artifact: "Android"
          runs-on: ubuntu-20.04
          os: android
          android_abi: 'arm64-v8a'
          android_ndk: '23.2.8568313'
          qt_host: 'linux'
          qt_host_arch: 'gcc_64'
          qt_target: 'android'
          qt_version: '6.4.2'
          qt_arch: 'android_x86_64'
          qt_extra_archs: 'android_arm64_v8a android_armv7 android_x86'
          cmake_extra_config: ''

        - name: "iOS"
          artifact: "iOS"
          runs-on: macos-12
          os: ios
          qt_host: 'mac'
          qt_host_arch: 'clang_64'
          qt_target: 'ios'
          qt_version: '6.4.2'
          qt_arch: 'ios'
          cmake_extra_config: ''

  # BUILD
  #################################################

    steps:

    # Get Qt
    #################################################

    - name: Install Qt via aqtinstall
      if: (matrix.config.os != 'linux') || matrix.config.appimage
      shell: sh
      run: |
        python3 -m pip install aqtinstall
        if [ "${{ matrix.config.qt_host_arch }}" != "" ]; then
          python3 -m aqt install-qt -O "${{ runner.workspace }}/Qt/" \
                         ${{ matrix.config.qt_host }} desktop \
                         ${{ matrix.config.qt_version }} ${{ matrix.config.qt_host_arch }} \
                         -m $BRICKSTORE_GUI_QT6_INSTALLER_MODULES
        fi
        for arch in ${{ matrix.config.qt_arch }} ${{ matrix.config.qt_extra_archs }}; do
          python3 -m aqt install-qt -O "${{ runner.workspace }}/Qt/" \
                         ${{ matrix.config.qt_host }} ${{ matrix.config.qt_target || 'desktop' }} \
                         ${{ matrix.config.qt_version }} $arch \
                         -m $BRICKSTORE_GUI_QT6_INSTALLER_MODULES
        done
        if [ "${{ matrix.config.os }}" = "windows" ]; then
          echo "Qt6_DIR=${{ runner.workspace }}\\Qt\\${{ matrix.config.qt_version }}\\${{ matrix.config.qt_dir || matrix.config.qt_arch }}" >> $GITHUB_ENV
        else
          echo "Qt6_DIR=${{ runner.workspace }}/Qt/${{ matrix.config.qt_version }}/${{ matrix.config.qt_dir || matrix.config.qt_arch }}" >> $GITHUB_ENV
        fi

    - name: Fix broken Windows / ARM64 setup
      if: (matrix.config.qt_arch == 'win64_msvc2019_arm64')
      run: |
        sed -i "s,/Users/qt/work/install/,`echo -E ${Qt6_DIR} | tr '\\' '/'`/../msvc2019_64/," "${Qt6_DIR}/bin/qtpaths.bat"
        sed -i "s,/Users/qt/work/install/,`echo -E ${Qt6_DIR} | tr '\\' '/'`/../msvc2019_64/," "${Qt6_DIR}/bin/qmake.bat"
        ${Qt6_DIR}/bin/qmake.bat -query
      shell: sh

    - name: Install Qt from Linux Distro (container)
      if: (matrix.config.os == 'linux') && matrix.config.debian_container
      run: |
        sudo -E docker run -v `pwd`:/brickstore -e BUILD_NUMBER --rm --name "debian-build" -d "${{ matrix.config.debian_container }}" sleep 1d
        sudo docker exec -e DEBIAN_FRONTEND=noninteractive "debian-build" apt -y update
        sudo docker exec -e DEBIAN_FRONTEND=noninteractive "debian-build" apt -y install \
            $BRICKSTORE_QT6_DEB_PACKAGES \
            $BRICKSTORE_GUI_QT6_DEB_PACKAGES \
            debhelper lsb-release fakeroot build-essential
      shell: bash

    # Checkout
    #################################################

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Pre-populate the cmake cache
    #################################################

    - name: Pre-populate cmake cache
      env:
        BRICKLINK_AFFILIATE_API_KEY: ${{ secrets.BRICKLINK_AFFILIATE_API_KEY }}
      run: |
        cat <<EOF >.initcache.txt
        set(BRICKLINK_AFFILIATE_API_KEY "$BRICKLINK_AFFILIATE_API_KEY" CACHE INTERNAL "")
        EOF
      shell: bash

    # Build for Windows
    #################################################


    - name: Build for Windows
      if: (matrix.config.os == 'windows')
      run: |
        call "${{ matrix.config.environment_script }}"
        call %Qt6_DIR%\bin\qt-cmake.bat -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -C .initcache.txt ${{ matrix.config.cmake_extra_config }} -B build -S .
        cmake --build build --config RelWithDebInfo --parallel --target installer --verbose
      shell: cmd

    - name: Upload Windows Installer
      if: (matrix.config.os == 'windows')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.artifact }}
        path: "build/*.exe"

    - name: Upload Windows debug info to sentry.io
      if: (matrix.config.os == 'windows')
      run: |
        curl.exe -L --output ..\\sentry-cli.exe "https://github.com/getsentry/sentry-cli/releases/latest/download/sentry-cli-Windows-i686.exe"
        ..\\sentry-cli.exe --auth-token ${{ secrets.SENTRY_AUTH_TOKEN }} upload-dif --org brickstore --project brickstore build/bin
      shell: cmd

    # Build for Linux
    #################################################

    - name: Build for Linux (container)
      if: (matrix.config.os == 'linux') && matrix.config.debian_container
      run: |
        sudo docker exec -w /brickstore "debian-build" /usr/lib/qt6/bin/qt-cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo -C .initcache.txt \
            ${{ matrix.config.cmake_extra_config }} -B build -S .
        sudo docker exec -w /brickstore "debian-build" cmake --build build --config RelWithDebInfo \
            --parallel --target deb-package --verbose
      shell: bash

    - name: Build for Linux (appimage)
      if: (matrix.config.os == 'linux') && matrix.config.appimage
      run: |
        sudo DEBIAN_FRONTEND=noninteractive apt -y install \
            g++-10 cmake ninja-build libglvnd-dev libtbb-dev libxkbcommon-dev libxkbcommon-x11-0 libxcb-\*
        ${Qt6_DIR}/bin/qt-cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -C .initcache.txt \
            -DCMAKE_C_COMPILER=/usr/bin/gcc-10 -DCMAKE_CXX_COMPILER=/usr/bin/g++-10 \
            ${{ matrix.config.cmake_extra_config }} -B build -S .
        cmake --build build --config RelWithDebInfo --parallel --target appimage --verbose
      shell: bash

    - name: Upload Linux DEB
      if: (matrix.config.os == 'linux') && !matrix.config.appimage
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.artifact }}
        path: "build/*.deb"

    - name: Upload Linux AppImage
      if: (matrix.config.os == 'linux') && matrix.config.appimage
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.artifact }}
        path: "build/*.AppImage"

    # Build for Android
    #################################################

    - name: Build for Android
      if: (matrix.config.os == 'android')
      run: |
        echo "Using NDK: $ANDROID_SDK_ROOT/ndk/${{ matrix.config.android_ndk }}"
        echo "QT_HOST_PATH: $(readlink -f $Qt6_DIR/../gcc_64)"
        # fix build-tools 33 (dx missing)
        for dir in `find $ANDROID_SDK_ROOT/build-tools/ -type d -mindepth 1`; do
          if [ -e $dir/d8 ] && [ ! -e $dir/dx ]; then
            sudo cp -a $dir/lib/d8.jar $dir/lib/dx.jar
            sudo cp -a $dir/d8 $dir/dx
          fi
        done
        sudo DEBIAN_FRONTEND=noninteractive apt -y install cmake ninja-build

        echo "${{ secrets.ANDROID_KEYSTORE_STORE_DATA }}" | base64 --decode >android_release.keystore
        export QT_ANDROID_KEYSTORE_PATH="`pwd`/android_release.keystore"
        export QT_ANDROID_KEYSTORE_ALIAS="${{ secrets.ANDROID_KEYSTORE_ALIAS }}"
        export QT_ANDROID_KEYSTORE_STORE_PASS="${{ secrets.ANDROID_KEYSTORE_STORE_PASS }}"
        export QT_ANDROID_KEYSTORE_KEY_PASS="${{ secrets.ANDROID_KEYSTORE_KEY_PASS }}"

        ${Qt6_DIR}/bin/qt-cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -C .initcache.txt \
            -DQT_HOST_PATH=$(readlink -f $Qt6_DIR/../gcc_64) \
            -DQT_ANDROID_SDK_BUILD_TOOLS_REVISION=30.0.3 \
            -DQT_ANDROID_TARGET_SDK_VERSION=31 \
            -DANDROID_NATIVE_API_LEVEL=23 \
            -DQT_ANDROID_BUILD_ALL_ABIS=TRUE \
            -DANDROID_NDK_ROOT=${ANDROID_SDK_ROOT}/ndk/${{ matrix.config.android_ndk }} \
            -DANDROID_SDK_ROOT=${ANDROID_SDK_ROOT} \
            -DQT_ANDROID_SIGN_AAB=TRUE \
            '-DQT_ANDROID_MULTI_ABI_FORWARD_VARS=BRICKLINK_AFFILIATE_API_KEY;SENTRY' \
            ${{ matrix.config.cmake_extra_config }} -B build -S .
        echo "Creating AAB"
        cmake --build build --config Release --parallel --target final-aab --verbose
        echo "Creating ARM64 APK"
        cmake --build build/android_abi_builds/arm64-v8a --config Release --parallel --target final-apk --verbose
        echo "Creating ARM APK"
        cmake --build build/android_abi_builds/armeabi-v7a --config Release --parallel --target final-apk --verbose

        echo VERSION_NUMBER="`cat VERSION_NUMBER`" >> $GITHUB_ENV
      shell: bash

    - name: Upload Android AAB
      if: (matrix.config.os == 'android')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.artifact }}-PlayStore
        path: "build/*.aab"

    - name: Upload Android ARM64 APK
      if: (matrix.config.os == 'android')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.artifact }}-ARM64
        path: "build/android_abi_builds/arm64-v8a/*.apk"

    - name: Upload Android ARM APK
      if: (matrix.config.os == 'android')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.artifact }}-ARM
        path: "build/android_abi_builds/armeabi-v7a/*.apk"

    - name: Upload Android AAB to the PlayStore
      if: (matrix.config.os == 'android')
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}
        packageName: de.brickforge.brickstore
        releaseFiles: build/*.aab
        status: completed
        track: beta
        releaseName: "${{ env.VERSION_NUMBER }} (build: ${{ env.BUILD_NUMBER }})"

    # Build for macOS
    #################################################

    - name: Build for macOS
      if: (matrix.config.os == 'macos')
      run: |
        ${Qt6_DIR}/bin/qt-cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -C .initcache.txt \
            ${{ matrix.config.cmake_extra_config }} -B build -S .
        cmake --build build --config RelWithDebInfo --parallel --target dmg --verbose
      shell: bash

    - name: Upload macOS DMG
      if: (matrix.config.os == 'macos')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.artifact }}
        path: "build/*.dmg"

    - name: Upload macOS debug info to sentry.io
      if: (matrix.config.os == 'macos')
      run: |
        brew install getsentry/tools/sentry-cli
        brew link getsentry/tools/sentry-cli
        /usr/local/bin/sentry-cli --auth-token ${{ secrets.SENTRY_AUTH_TOKEN }} upload-dif \
            --org brickstore --project brickstore build/BrickStore.app.dSYM ${Qt6_DIR}/lib/

    # Build for iOS
    #################################################

    # see here for a description of this setup
    # https://betterprogramming.pub/deploy-an-ios-app-to-testflight-or-the-app-store-using-github-actions-c4d7082b1430

    - name: Import signing certificate
      if: (matrix.config.os == 'ios')
      env:
        SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.IOS_SIGNING_CERTIFICATE_P12_DATA }}
        SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.IOS_SIGNING_CERTIFICATE_PASSWORD }}
      run: |
        exec .github/scripts/ios-import-certificate.sh

    - name: Import provisioning profile
      if: (matrix.config.os == 'ios')
      env:
        PROVISIONING_PROFILE_DATA: ${{ secrets.IOS_PROVISIONING_PROFILE_DATA }}
        PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.IOS_PROV_PROFILE }}
      run: |
        exec .github/scripts/ios-import-profile.sh

    - name: Import AppStore API key
      if: (matrix.config.os == 'ios')
      env:
        API_KEY: ${{ secrets.IOS_API_KEY }}
        API_KEY_DATA: ${{ secrets.IOS_API_KEY_DATA }}
      run: |
        exec .github/scripts/ios-import-apikey.sh

    - name: Build for iOS
      if: (matrix.config.os == 'ios')
      run: |
        ${Qt6_DIR}/bin/qt-cmake -G Xcode -DCMAKE_BUILD_TYPE=Release -C .initcache.txt \
            -DQT_HOST_PATH=$(readlink -f $Qt6_DIR/../macos) \
            -DCMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM=${{ secrets.IOS_DEV_TEAM }} \
            -DCMAKE_XCODE_ATTRIBUTE_PROVISIONING_PROFILE_SPECIFIER=${{ secrets.IOS_PROV_PROFILE }} \
            -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY=${{ secrets.IOS_CODE_SIGN_IDENTITY }} \
            -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_STYLE=Manual \
            ${{ matrix.config.cmake_extra_config }} -B build -S .
        cmake --build build --config Release --parallel --target ipa --verbose
      shell: bash

    - name: Upload iOS IPA
      if: (matrix.config.os == 'ios')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.artifact }}-AppStore
        path: "build/*.ipa"

    - name: Upload iOS IPA to the AppStore
      if: (matrix.config.os == 'ios')
      run: |
        xcrun altool --upload-app -f build/BrickStore-*.ipa -t ios \
            --apiIssuer "${{ secrets.IOS_API_ISSUER }}" \
            --apiKey "${{ secrets.IOS_API_KEY }}"
      shell: bash

    # Generate documentation
    #################################################

    - name: Generate Documentation
      if: (matrix.config.os == 'linux') && matrix.config.debian_container && matrix.config.generate_docs && (github.ref == 'refs/heads/main')
      run: |
        sudo docker exec -w /brickstore "debian-build" cmake --build build --target extensions-doc --verbose

    - name: Publish Documentation
      if: matrix.config.generate_docs && (github.ref == 'refs/heads/main')
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build/doc/html

    # Generate the Backend Docker image
    #################################################

    - name: Create and push Docker image
      if: (matrix.config.os == 'linux') && matrix.config.generate_docker
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        cp build/*.deb docker/brickstore-backend.deb
        cd docker
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
        docker build . --tag "rgriebl/brickstore-backend:$BUILD_NUMBER"
        docker push "$DOCKER_USER/brickstore-backend:$BUILD_NUMBER"

  # RELEASE
  #################################################

  release:
    needs: [ build ]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - name: Download Artifacts to Release
      uses: actions/download-artifact@v2
      with:
        path: 'artifacts'

    - name: Rename Artifacts
      run: |
        find artifacts -mindepth 2 -type f -print0 | while read -d $'\0' a; do
          d="$(dirname $a)"
          mv "$a" "${d}-$(basename $a)"
          rm -rf "$d"
        done
        echo "Artifacts after flattening:"
        find artifacts
      shell: bash

    - name: Release
      uses: docker://antonyurchenko/git-release:latest
      # uses: rgriebl/git-release@testing
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: artifacts/*

    - name: Create release on sentry.io
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: brickstore
        SENTRY_PROJECT: brickstore
      with:
        version: "brickstore@${{ env.BUILD_NUMBER }}"
