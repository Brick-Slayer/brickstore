name: QMake Build Matrix

on: [push, workflow_dispatch]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      BUILD_NUMBER: ${{ github.run_number }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: "Windows 32bit"
          artifact: "Windows-x86"
          os: windows-latest
          qt_version: '5.15.2'
          qt_arch: 'win32_msvc2019'
          openssl_version: 'Win32OpenSSL_Light-1_1_1j'
          environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars32.bat"
          vcpkg_triplet: 'x86-windows'

        - name: "Windows 64bit"
          artifact: "Windows-x64"
          os: windows-latest
          qt_version: '5.15.2'
          qt_arch: 'win64_msvc2019_64'
          openssl_version: 'Win64OpenSSL_Light-1_1_1j'
          environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          qmake_extra_config: 'CONFIG+=sentry "VCPKG_PATH=c:\vcpkg\installed\x64-windows"'
          vcpkg_triplet: 'x64-windows'

        - name: "Ubuntu 20.04 64bit"
          artifact: "Ubuntu-20.04"
          os: ubuntu-20.04

        - name: "Debian 11 Backend 64bit"
          artifact: "Debian-11-Backend"
          os: ubuntu-20.04
          debian_container: "buildpack-deps:bullseye"
          qmake_extra_config: "CONFIG+=backend-only"

        - name: "Linux AppImage 64bit"
          artifact: "Linux"
          os: ubuntu-18.04
          appimage: true
          qt_version: '5.15.2'
          qt_arch: ''

        - name: "macOS 64bit"
          artifact: "macOS"
          os: macos-latest
          qt_version: '5.15.2'
          qt_arch: ''

    steps:
    - name: Cache Qt from qt.io
      if: (!startsWith(matrix.config.os, 'ubuntu') || matrix.config.appimage)
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ matrix.config.os }}-${{ matrix.config.qt_arch }}-QtCache

    - name: Install Qt from qt.io
      if: (!startsWith(matrix.config.os, 'ubuntu') || matrix.config.appimage)
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        version: ${{ matrix.config.qt_version }}
        modules: 'qtsvg qttools'
        arch: ${{ matrix.config.qt_arch }}
        tools: ${{ matrix.config.qt_tools }}

    - name: Install Qt on Linux (native/appimage)
      if: startsWith(matrix.config.os, 'ubuntu') && !matrix.config.debian_container
      run: |
        sudo apt update
        sudo apt -y install debhelper qtbase5-dev qt5-qmake qtbase5-dev-tools qtchooser qt5-style-plugins libqt5opengl5-dev qttools5-dev qtbase5-private-dev qtdeclarative5-dev lsb-release fakeroot build-essential
      shell: bash

    - name: Install Qt on Linux (container)
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.debian_container && !matrix.config.appimage
      run: |
        sudo docker run -v `pwd`:/build --rm --name "debian-build" -d "${{ matrix.config.debian_container }}" sleep 1d
        sudo docker exec "debian-build" apt update
        sudo docker exec "debian-build" apt -y install debhelper qtbase5-dev qt5-qmake qtbase5-dev-tools qtchooser libqt5opengl5-dev qttools5-dev qtbase5-private-dev qtdeclarative5-dev lsb-release fakeroot build-essential
      shell: bash

    - name: Install OpenSSL on Windows
      if: startsWith(matrix.config.os, 'windows')
      run: |
        curl.exe --output openssl.msi "https://slproweb.com/download/${{ matrix.config.openssl_version }}.msi"
        msiexec /i openssl.msi /quiet /qn /norestart
      shell: cmd

    - name: Install sentry.io on Windows
      if: startsWith(matrix.config.os, 'windows')
      run: |
        c:\vcpkg\vcpkg install --recurse sentry-native --triplet ${{ matrix.config.vcpkg_triplet }}
      shell: cmd

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Build on Windows
      if: startsWith(matrix.config.os, 'windows')
      run: |
        call "${{ matrix.config.environment_script }}"
        qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        nmake
        nmake installer
      shell: cmd

    - name: Upload PDBs to sentry.io on Windows
      if: startsWith(matrix.config.os, 'windows')
      run: |
        curl.exe -L --output ..\\sentry-cli.exe "https://github.com/getsentry/sentry-cli/releases/latest/download/sentry-cli-Windows-i686.exe"
        ..\\sentry-cli.exe --auth-token ${{ secrets.SENTRY_AUTH_TOKEN }} upload-dif --org brickstore --project brickstore .
      shell: cmd

    - name: Create Sentry release
      if: startsWith(matrix.config.os, 'ubuntu') && !matrix.config.debian_container && !matrix.config.appimage
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: brickstore
        SENTRY_PROJECT: brickstore
      with:
        version: "${{ github.run_number }}"

    - name: Upload Installer on Windows
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'windows')
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.exe"

    - name: Build on Linux (native)
      if: startsWith(matrix.config.os, 'ubuntu') && !matrix.config.debian_container && !matrix.config.appimage
      run: |
        qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        make package
      shell: bash

    - name: Build on Linux (container)
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.debian_container && !matrix.config.appimage
      run: |
        sudo docker exec -w /build "debian-build" qmake CONFIG+=release "${{ matrix.config.qmake_extra_config }}"
        sudo docker exec -w /build "debian-build" make package
      shell: bash

    - name: Build on Linux (appimage)
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.appimage
      run: |
        qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        make
        make appimage
      shell: bash

    - name: Upload DEB on Linux
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'ubuntu') && !matrix.config.appimage
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.deb"

    - name: Upload AppImage on Linux
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.appimage
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.AppImage"

    - name: Build on macOS
      if: (startsWith(matrix.config.os, 'mac'))
      run: |
        qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        make
        make installer
      shell: bash

    - name: Upload DMG on macOS
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'mac')
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.dmg"

  release:
    needs: [ build ]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Download Artifacts to Release
      uses: actions/download-artifact@v2
      with:
        path: 'artifacts'

    - name: Rename Artifacts
      run: |
        find artifacts -mindepth 2 -type f -print0 | while read -d $'\0' a; do
          d="$(dirname $a)"
          mv "$a" "${d}-$(basename $a)"
          rm -rf "$d"
        done
        echo "Artifacts after flattening:"
        find artifacts
      shell: bash

    - name: Release
      uses: docker://antonyurchenko/git-release:latest
      # uses: rgriebl/git-release@testing
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CHANGELOG_FILE: 'CHANGELOG.md'
        ALLOW_EMPTY_CHANGELOG: "false"
        ALLOW_TAG_PREFIX: "true"
      with:
        args: artifacts/*
