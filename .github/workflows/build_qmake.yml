name: QMake Build Matrix

on:
  push:
    workflow_dispatch:
    branches:
      - legacy-qt5.15-based

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.runs-on }}
    env:
      BUILD_NUMBER: ${{ github.run_number }}
      BRICKSTORE_QT_MODULES: libtbb-dev qtbase5-dev qt5-qmake qtbase5-dev-tools qtchooser qt5-style-plugins libqt5opengl5-dev qttools5-dev qtbase5-private-dev qtdeclarative5-dev

    strategy:
      fail-fast: false
      matrix:
        config:
        - name: "Windows 32bit"
          artifact: "Windows-x86"
          runs-on: windows-2019
          os: windows
          qt_version: '5.15.2'
          qt_arch: 'win32_msvc2019'
          openssl_version: 'Win32OpenSSL_Light-1_1_1q'
          environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars32.bat"
          qmake_extra_config: ''

        - name: "Windows 64bit"
          artifact: "Windows-x64"
          runs-on: windows-2019
          os: windows
          qt_version: '5.15.2'
          qt_arch: 'win64_msvc2019_64'
          openssl_version: 'Win64OpenSSL_Light-1_1_1q'
          environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          qmake_extra_config: ''

        - name: "Linux AppImage 64bit"
          artifact: "Linux"
          runs-on: ubuntu-20.04
          os: linux
          appimage: true
          qt_version: '5.15.2'
          qt_arch: ''

        - name: "macOS 64bit"
          artifact: "macOS"
          runs-on: macos-11
          os: macos
          qt_version: '5.15.2'
          qt_arch: ''
          qmake_extra_config: ''

  # BUILD
  #################################################

    steps:

    # Caching
    #################################################

    - name: Cache Qt from qt.io
      id: cache-qt
      if: (matrix.config.os != 'linux') || matrix.config.appimage
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ matrix.config.os }}-${{ matrix.config.qt_target }}-${{ matrix.config.qt_arch }}-QtCache-legacy-5.15-based

    # Get Qt
    #################################################

    - name: Install Qt from qt.io
      if: (matrix.config.os != 'linux') || matrix.config.appimage
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        version: ${{ matrix.config.qt_version }}
        modules: 'qtsvg qttools'
        arch: ${{ matrix.config.qt_arch }}
        target: ${{ matrix.config.qt_target || 'desktop' }}
        tools: ${{ matrix.config.qt_tools }}
        # setup-python: false # https://github.com/jurplel/install-qt-action/issues/142

    - name: Install Qt from qt.io (OS version for cross-compiling)
      if: (matrix.config.os == 'android') || (matrix.config.os == 'ios')
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        version: ${{ matrix.config.qt_version }}
        modules: 'qttools'
        target: 'desktop'
        tools: ${{ matrix.config.qt_tools }}
        # setup-python: false # https://github.com/jurplel/install-qt-action/issues/142

    - name: Install Qt from Linux Distro (native/appimage)
      if: (matrix.config.os == 'linux') && !matrix.config.debian_container
      run: |
        sudo DEBIAN_FRONTEND=noninteractive apt -y update
        sudo DEBIAN_FRONTEND=noninteractive apt -y install $BRICKSTORE_QT_MODULES debhelper lsb-release fakeroot build-essential
      shell: bash

    - name: Install Qt from Linux Distro (container)
      if: (matrix.config.os == 'linux') && matrix.config.debian_container
      run: |
        sudo docker run -v `pwd`:/build --rm --name "debian-build" -d "${{ matrix.config.debian_container }}" sleep 1d
        sudo docker exec -e DEBIAN_FRONTEND=noninteractive "debian-build" apt -y update
        sudo docker exec -e DEBIAN_FRONTEND=noninteractive "debian-build" apt -y install $BRICKSTORE_QT_MODULES debhelper lsb-release fakeroot build-essential
      shell: bash

    # Install OpenSSL
    #################################################

    - name: Install OpenSSL on Windows (slproweb)
      if: startsWith(matrix.config.os, 'windows')
      run: |
        curl.exe --output openssl.msi "https://slproweb.com/download/${{ matrix.config.openssl_version }}.msi"
        msiexec /i openssl.msi /quiet /qn /norestart
      shell: cmd

    # Checkout
    #################################################

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Build for Windows
    #################################################

    - name: Build for Windows
      if: (matrix.config.os == 'windows')
      run: |
        call "${{ matrix.config.environment_script }}"
        qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        nmake
        nmake installer
      shell: cmd

    - name: Upload Windows Installer
      if: (matrix.config.os == 'windows')
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.exe"

    # Build for Linux
    #################################################

    - name: Build for Linux (native)
      if: (matrix.config.os == 'linux') && !matrix.config.debian_container && !matrix.config.appimage
      run: |
        qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        make package
      shell: bash

    - name: Build for Linux (container)
      if: (matrix.config.os == 'linux') && matrix.config.debian_container
      run: |
        sudo docker exec -w /build "debian-build" qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        sudo docker exec -w /build "debian-build" make package
      shell: bash

    - name: Build for Linux (appimage)
      if: (matrix.config.os == 'linux') && matrix.config.appimage
      run: |
        sudo DEBIAN_FRONTEND=noninteractive apt -y install g++-10
        qmake CONFIG+=release QMAKE_CXX=g++-10 QMAKE_CC=gcc-10 ${{ matrix.config.qmake_extra_config }}
        make
        make appimage
      shell: bash

    - name: Upload Linux DEB
      if: (matrix.config.os == 'linux') && !matrix.config.appimage
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.deb"

    - name: Upload Linux AppImage
      if: (matrix.config.os == 'linux') && matrix.config.appimage
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.AppImage"

    # Build for macOS
    #################################################

    - name: Build for macOS
      if: (matrix.config.os == 'macos')
      run: |
        qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        make
        make installer
      shell: bash

    - name: Upload macOS DMG
      if: (matrix.config.os == 'macos')
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.dmg"
